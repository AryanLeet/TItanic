#%%
from sklearn.model_selection import train_test_split
import pandas as pd 
import numpy as np
import warnings
import time
import sys
import os 

DeprecationWarning('ignore')
warnings.filterwarnings('ignore',message="don't have warning")

#%%
os.getcwd()


#%%
os.chdir("D:/machinelearning")

#%%

os.listdir("D:/machinelearning")


#%%
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.linear_model import LogisticRegression


#%%
df=pd.read_csv('train.csv')


#%%
df

#%%
df.head()

#%%
df.sample(12)


#%%
df.describe()

#%%
df.isnull().sum()

#%%
df.isnull()

#%%
import seaborn as sns 
sns.distplot(df.Age.dropna())

#%%
sns.distplot(df.Fare.dropna())


#%%
sample=df.sample(40)
sample.describe()


#%%
train, test = train_test_split(df,test_size=0.2,random_state = 12)
del df

#%%
del sample


#%%
train.shape

#%%
test.shape

#%%
train.head
#%%
"""aise hi likha data ko split krna agar bina sklearn ka use krke"""
def abc(x_train):
    a= x_train.iloc[:400,:]
    b=x_train.iloc[400:,:]
    return a,b
a,b = abc(x_train)

#%%
x_train.iloc[:,:9]

#%%
train.isnull().sum()
#%%
mean_age = train.Age.mean()


#%%
def fill_age(df):
    mean =  29.67
    df['Age'].fillna(mean, inplace = True)

#%%
train.isnull().sum()

#%%
def fill_age(df):
    mean =  29.67
    df['Age'].fillna(mean, inplace = True)
    return df

def fill_embarked(df):
    df.Embarked.fillna('S',inplace = True)
    return(df)
def label_encode(df):
    from sklearn.preprocessing import LabelEncoder 
    label = LabelEncoder()
    df['Sex'] =  label.fit_transform(df['Sex'])
    df['Embarked'] = label.fit_transform(df['Embarked'])
    return df
def encode_feature(df):
    df = fill_age(df)
    df = fill_embarked(df)
    df = label_encode(df)
    return(df)
#%%
train = encode_feature(train)
test = encode_feature(test)

#%%
def x_and_y(df):
    x = df.drop(["Survived","PassengerId","Cabin","Name","Ticket"],axis=1)
    y = df["Survived"]
    return x,y
x_train,y_train = x_and_y(train)
x_test,y_test = x_and_y(test)

#%%
log_model = LogisticRegression()
log_model.fit(x_train,y_train)
prediction = log_model.predict(x_test)
score = accuracy_score(y_test,prediction)
print(score)
#%%
y_train.shape

#%%
from scipy import stats
stats.pearsonr(train['Fare'],train["Age"])

#%%
import seaborn as sns
sns.scatterplot(train['Age'],train['Fare'])

#%%
x_train.columns


#%%
pclass=int(input('Please enter class'))
sex=input("Please enter Gender")
Age=int(input('Enter your Age'))
SibSp=int(input('Siblings'))
Parch=int(input('Parents'))
Fare=int(input('Enter Fare'))
Embarked=input('Embarked').upper()


#%%
df=pd.read_csv('test.csv')

#%%
df

#%%
aryan=pd.read_csv('aryan.csv')
encode_feature(aryan)
encode_feature(x_train)

#%%
log_model = LogisticRegression()
log_model.fit(x_train,y_train)
prediction = log_model.predict(x_test)
score = accuracy_score(y_test,prediction)
print(score)


#%%
log_model = LogisticRegression()
log_model.fit(x_train,y_train)
prediction = log_model.predict(aryan)
print(prediction)


#%%
aryan

#%%
from sklearn.metrics import roc_curve
prob = log_model.predict_proba(x_train)
fpr, tpr, thresholds = roc_curve(y_train, prob[:,-1])

import matplotlib.pyplot as pit
pit.plot(fpr, tpr, linewidth=2)
pit.plot([0,1],[0,1])
pit.axis([0,1,0,1])


#%%
import seaborn as sns
tips= sns.load_dataset('tips')
#%%
tips.head()

#%%
sns.set_style('whitegrid')
sns.distplot(tips.total_bill,hist= True, kde= True,rug=True, bins=90)
sns.distplot(tips.tip, hist=False)
#%%
sns.scatterplot(x='total_bill',y= 'tip',data= tips)
pit.show()

#%%
sns.boxplot(y= tips.total_bill,orient='y',x=tips['sex'])

#%%
tips.describe()
#%%
tips.total_bill.median()
